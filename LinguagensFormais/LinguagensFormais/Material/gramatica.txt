ProgArduino -> 
	ListaProg

ListaProg -> // falta implementar
	ListaComandos |
	DeclaraFuncao |
	ListaProg

ListaComandos ->
	DeclaraVar |
	Atribuicao |
	If |
	For |
	While |
	DoWhile |
	Funcao |
	ListaComandos

DeclaraVar ->
	TipoVar id ListaVar;

ListaVar -> 
	, id ListaVar |
	{}

TipoVar ->
	int |
	long |
	float |
	byte

Atribuicao -> 
	id = Exp

Exp -> T R
R -> || T R1
R -> Ɛ

T -> F U
U -> && F U1
U -> Ɛ

F -> G

G -> ~G
G -> H V

V -> > H V1
V -> == H V1
V -> < H V1
V -> >= H V1
V -> != H V1
V -> <= H V1
V -> Ɛ

H -> J X
X -> + J X1
X -> - J X1
X -> Ɛ

J -> K Y
Y -> * K Y1
Y -> / K Y1
Y -> % K Y1
Y -> Ɛ

K ->
	int |
	long |
	byte |
	float |
	id |
	(E) |
	funcao() [PRECISA DIFERENCIAR VOID DE OUTROS TIPOS?] nao

If ->
	if ( Exp ) { ListaComandos } IfEnd
IfEnd ->
	else { ListaComandos } |
	else If |
	{}
	
While ->
	while ( Exp ) { ListaComandos }

DoWhile ->
	do { ListaComandos } while ( Exp );

[BRUNO]
For ->
	for ( ListaAtrib; Exp; ListaAtrib ) { ListaComandos }
ListaAtrib ->
	Atribuicao ListaAtribA
ListaAtribA ->
	, Atribuicao ListaAtribA |
	{}

[GLAUBER]
For ->
	for ( ListaAtrib; Exp; ListaAtrib ) { ListaComandos }
ListaAtrib ->
	Exp ListaAtribA
ListaAtribA ->
	, ListaAtribA |
	{}

Switch ->
	switch ( Exp ) { ListaCase SwitchDefault }
ListaCase ->
	case id : ListaComandos CaseEnd |
	ListaCase |
	{}
CaseEnd ->
	break; |
	{}
SwitchDefault ->
	default: ListaComandos CaseEnd |
	{}

DeclaraFuncao -> 
	TipoRetorno id ( ListaDecParam ) { ListaComandos Retorno }
TipoRetorno ->
	TipoVar |
	void
ListaDecParam ->
	TipoVar id ListaDecParamA |
	{}
ListaDecParamA ->
	, ListaDecParam |
	{}
Retorno ->
	return Exp; | // somente Exp?
	{}

Funcao ->
	id ( ListaParam );
ListaParam -> 
	id ListaParamRec | 
	Exp ListaParamRec | 
	{}
ListaParamRec -> 
	, id ListaParamRec | 
	, Exp ListaParamRec | 
	{}